schema {
  query: QueryRoot
  mutation: MutationRoot
  subscription: SubscriptionRoot
}

# Directs the executor to query only when the field exists.
directive @ifdef on FIELD

type Book {
  id: String!
  name: String!
  author: String!
}

type BookChanged {
  mutationType: MutationType!
  id: ID!
  book: Book
}

type BooksMutations {
  createBook(name: String!, author: String!): ID!
  deleteBook(id: ID!): Boolean!
}

type MutationRoot {
  books: BooksMutations!
  createSessionId: UserSession!
  signal(peerId: String!, signal: String!): Boolean!
}

enum MutationType {
  CREATED
  DELETED
}

type QueryRoot {
  books: [Book!]!
  token: String
  users: [String!]!
  rooms: [String!]!
}

type Room {
  users: [String!]!
}

type Signal {
  payload: String!
  peerId: String!
}

type SubscriptionRoot {
  interval(n: Int! = 1): Int!
  books(mutationType: MutationType): BookChanged!
  room(roomId: String!): Room!
  signals: Signal!
}

type UserSession {
  userId: String!
  token: String
}
